name: ProjetoIA-Service   

networks:
  local-network:
    external: true

volumes:
  openwebui_data:
  postgres_data:
  qdrant_data:
  redis_data:
  ollama-data:
  litellm-data: 
  keycloak_data: 

services:        

  keycloak-service:
    image: quay.io/keycloak/keycloak:26.2
    container_name: keycloak-container
    restart: unless-stopped
    environment:
      KC_DB: postgres
      KC_DB_URL: jdbc:postgresql://postgres:5432/keycloak
      KC_DB_USERNAME: ${POSTGRES_USER}
      KC_DB_PASSWORD: ${POSTGRES_PASSWORD}
      #KC_BOOTSTRAP_ADMIN_USERNAME: ${KC_BOOTSTRAP_ADMIN_USERNAME}
      #KC_BOOTSTRAP_ADMIN_PASSWORD: ${KC_BOOTSTRAP_ADMIN_PASSWORD}
      KEYCLOAK_ADMIN: ${KC_BOOTSTRAP_ADMIN_USERNAME}
      KEYCLOAK_ADMIN_PASSWORD: ${KC_BOOTSTRAP_ADMIN_PASSWORD}
      KC_HOSTNAME: localhost
      KC_HOSTNAME_STRICT: false
      KC_HTTP_PORT: 8080
      KC_HTTPS_PORT: 7443      
      KC_HOSTNAME_STRICT_FRONTCHANNEL: 'true'
      KC_HTTP_ENABLED: 'true' #PRD false
      KC_HEALTH_ENABLED: 'true'
      KC_METRICS_ENABLED: 'true'
      KC_HTTP_METRICS_HISTOGRAMS_ENABLED: 'true'
      KC_CACHE_METRICS_HISTOGRAMS_ENABLED: 'true'
      KC_LOG_LEVEL: INFO # DEBUG     
      KC_LOG_CONSOLE_COLOR: 'true'  
      KC_PROXY: none
      LANG: pt_BR.UTF-8 
    volumes:
      - keycloak_data:/opt/keycloak/data
    init: true
    #command: ['start-dev', '--http-port', '8080', '--https-port', '7443', '--hostname', 'keycloak-service']
    command: ['start-dev', '--http-port', '8080']
    ports:
      - 8080:8080
      - 7443:7443
      - 9000:9000
    networks:
      - local-network
    depends_on:
      - postgres        
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health/ready"]
      interval: 15s
      timeout: 2s
      retries: 15
      start_period: 2m
    deploy:
      resources:
        limits:
          cpus: '0.50'
          memory: 512M
        reservations:
          cpus: '0.30'
          memory: 128M    

  litellm-service:
    image: ghcr.io/berriai/litellm:main-stable
    container_name: litellm-container
    networks:
      - local-network
    env_file:
      - .env
    ports:
      - 4000:4000
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_LITELLM_DB}
      LITELLM_MASTER_KEY: ${LITELLM_MASTER_KEY}
      UI_USERNAME: ${UI_USERNAME}
      UI_PASSWORD: ${UI_PASSWORD}
      STORE_MODEL_IN_DB: "True" # allows adding models to proxy via UI
    depends_on: # Ensure that litellm starts after open-webui and litellm-db      
      - openwebui        
      - postgres        
    healthcheck: # Defines the health check configuration for the container
      test: [
          "CMD",
          "curl",
          "-f",
          "http://localhost:4000/health/liveliness || exit 1",
        ] # Command to execute for health check
      interval: 30s # Perform health check every 30 seconds
      timeout: 10s # Health check command times out after 10 seconds
      retries: 3 # Retry up to 3 times if health check fails
      start_period: 40s # Wait 40 seconds after container start before beginning health checks
    restart: on-failure:5
    deploy:
      resources:
        limits:
          cpus: '0.50'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 128M  


  ollama-service:
    image: ollama/ollama:latest
    container_name: ollama-container
    volumes:
      - ollama-data:/root/.ollama
    ports:
      - "11434:11434"
    pull_policy: always
    tty: true
    restart: always
    deploy:
      resources:
        limits:
          cpus: '0.50'
          memory: 256M
        reservations:
          cpus: '0.25'  
          devices:
            - driver: ${OLLAMA_GPU_DRIVER-nvidia}
              count: ${OLLAMA_GPU_COUNT-1}
              capabilities:
                - gpu
    healthcheck:
      test: ollama --version || exit 1
 
  openwebui:
    image: ghcr.io/open-webui/open-webui:latest
    container_name: openwebui
    hostname: openwebui
    restart: unless-stopped
    depends_on:
      - postgres
      - qdrant
      - ollama-service        
    environment:
      - DATABASE_URL=postgresql://postgres:${POSTGRES_PASSWORD:-some_random_postgres_password}@postgres:5432/openwebui
      - QDRANT_URI=http://qdrant:${QDRANT_PORT:-6333}
      - VECTOR_DB=${VECTOR_DB:-qdrant}
      - QDRANT_API_KEY=${QDRANT_API_KEY:-some_random_qdrant_api_key}
      - PORT=${OPENWEBUI_PORT:-8080}
      - REDIS_URL=redis://default:${REDIS_PASSWORD:-some_random_redis_password}@redis:6379 
      - ENABLE_WEBSOCKET_SUPPORT=true
      - WEBSOCKET_MANAGER=redis
      - WEBSOCKET_REDIS_URL=redis://default:${REDIS_PASSWORD:-some_random_redis_password}@redis:6379
      - DATABASE_POOL_SIZE=20
      - DATABASE_POOL_MAX_OVERFLOW=10
      - DATABASE_POOL_TIMEOUT=30
      - DATABASE_POOL_RECYCLE=1800
      - DEFAULT_USER_EMAIL=user@example.com
      - DEFAULT_USER_PASSWORD=some_random_admin_password
      - DEFAULT_USER_FIRST_NAME=User
      - DEFAULT_USER_LAST_NAME=Name
      - DEFAULT_USER_ROLE=admin
      - OLLAMA_BASE_URL=http://ollama:11434
      - WEBUI_SECRET_KEY:${WEBUI_SECRET_KEY}
    extra_hosts:
      - host.docker.internal:host-gateway
    volumes:
      - openwebui_data:/app/backend/data
    networks:
      - local-network
    ports:
      - 3000:8080
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          cpus: '0.50'
          memory: 256M
        reservations:
          cpus: '0.25'
          memory: 128M

  postgres:
    image: postgres:15-alpine
    container_name: postgres
    hostname: postgres
    restart: unless-stopped
    command: postgres -c shared_buffers=256MB -c work_mem=16MB -c maintenance_work_mem=128MB -c effective_cache_size=512MB -c max_connections=100
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=some_random_postgres_password
      - POSTGRES_DB=postgres
      - POSTGRES_MULTIPLE_DATABASES=openwebui,litellm,keycloak,langflow,linkwarden,n8n
      - POSTGRES_PORT=5432
      - POSTGRES_LOG_LEVEL=4
      - PGDATA=/var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/postgres-init:/docker-entrypoint-initdb.d      
    ports:
        - 5432:5432
    networks:
      - local-network
    healthcheck:
      test:
        - CMD-SHELL
        - pg_isready -U postgres -d postgres
      interval: 50s
      timeout: 5s
      retries: 15
      start_period: 2m
    deploy:
      resources:
        limits:
          cpus: '0.50'
          memory: 256M
        reservations:
          cpus: '0.25'
          memory: 128M

  qdrant:
    image: qdrant/qdrant:latest
    container_name: qdrant
    hostname: qdrant
    environment:
      - QDRANT__SERVICE__API_KEY=${QDRANT_API_KEY:-some_random_qdrant_api_key}
      - QDRANT__SERVICE__ENABLE_API_KEY_AUTHORIZATION=true
    restart: unless-stopped
    volumes:
      - qdrant_data:/qdrant/storage
    networks:
      - local-network
    ports:
      - 6333:6333
      - 6334:6334
    healthcheck:
          test: ["CMD", "curl", "-f", "http://localhost:6333/readyz"]
          interval: 10s
          timeout: 2s
          retries: 5
    deploy:
      resources:
        limits:
          cpus: '0.50'
          memory: 256M
        reservations:
          cpus: '0.25'
          memory: 128M
   
 
  redis:
    image: "redis:latest"
    container_name: redis
    hostname: redis
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD:-some_random_redis_password}
    volumes:
      - redis_data:/data
    networks:
      - local-network
    ports:
      - "6379:6379"
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - REDIS_HOST=${REDIS_HOST}
      - REDIS_PORT=${REDIS_PORT}
      #- REDIS_DATABASES=${REDIS_DATABASES} 
    healthcheck:
      test: ["CMD-SHELL", "redis-cli ping | grep PONG"]
      interval: 1s
      timeout: 3s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: '0.50'
          memory: 256M
        reservations:
          cpus: '0.25'
          memory: 128M    