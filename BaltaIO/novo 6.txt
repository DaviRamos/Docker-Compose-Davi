services:
  db:
    image: pgvector/pgvector:pg17 # Use an image with pgvector for Postgres 17
    container_name: pgvector-db
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
      POSTGRES_DB: vectordb
    ports:
      - "5432:5432" # Map host port 5432 to container port 5432
    volumes:
      - pgdata:/var/lib/postgresql/data # Mount volume for persistent data
      - ./postgres/schema.sql:/docker-entrypoint-initdb.d/schema.sql # Initialize database with schema
volumes:
  pgdata:
  
 services:
  pgvector-db:
    image: ankane/pgvector # Or use a custom Dockerfile to build from official postgres image
    container_name: pgvector-postgres
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: mydatabase
      POSTGRES_USER: myuser
      POSTGRES_PASSWORD: mypassword
    volumes:
      - db_data:/var/lib/postgresql/data
      - ./init-pgvector.sql:/docker-entrypoint-initdb.d/init-pgvector.sql
volumes:
  db_data:
  
  
Setting up PostgreSQL with the pgvector extension using Docker Compose involves defining a service in a docker-compose.yml file that utilizes a PostgreSQL image and ensures the pgvector extension is enabled.
Here's a basic docker-compose.yml configuration:
Código
version: '3.8'
services:
  pgvector-db:
    image: ankane/pgvector # Or use a custom Dockerfile to build from official postgres image
    container_name: pgvector-postgres
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: mydatabase
      POSTGRES_USER: myuser
      POSTGRES_PASSWORD: mypassword
    volumes:
      - db_data:/var/lib/postgresql/data
      - ./init-pgvector.sql:/docker-entrypoint-initdb.d/init-pgvector.sql
volumes:
  db_data:
Explanation:
•	version: '3.8': Specifies the Docker Compose file format version.
•	services:: Defines the services (containers) that make up your application.
o	pgvector-db:: This is the name of your PostgreSQL service.
	image: ankane/pgvector: This uses a pre-built Docker image that includes the pgvector extension. Alternatively, you can create a Dockerfile to build your own image based on the official postgres image and install pgvector.
	container_name: pgvector-postgres: Assigns a specific name to the container for easier identification.
	ports: - "5432:5432": Maps port 5432 on your host machine to port 5432 inside the container, allowing you to connect to the database.
	environment:: Sets environment variables for the PostgreSQL container, including database name, user, and password.
	volumes::
	- db_data:/var/lib/postgresql/data: Persists your database data by mapping a named volume db_data to the PostgreSQL data directory inside the container. This ensures data is not lost when the container is stopped or removed.
	- ./init-pgvector.sql:/docker-entrypoint-initdb.d/init-pgvector.sql: Mounts an SQL script from your local directory into the container's /docker-entrypoint-initdb.d/ directory. This script will be executed when the container starts for the first time, allowing you to create the vector extension. 
•	volumes:: Defines the named volumes used by your services.
init-pgvector.sql (example):
Create a file named init-pgvector.sql in the same directory as your docker-compose.yml with the following content:
Código
CREATE EXTENSION IF NOT EXISTS vector;
To run this setup:
•	Save the docker-compose.yml and init-pgvector.sql files in the same directory.
•	Open your terminal in that directory.
•	Run docker-compose up -d to start the services in detached mode.
This will launch a PostgreSQL container with the pgvector extension enabled, ready for use.

