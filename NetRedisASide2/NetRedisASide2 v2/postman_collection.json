{
	"info": {
		"name": "NetRedisASide2 API v2",
		"description": "Cole√ß√£o completa para testes da API NetRedisASide2 com autentica√ß√£o Keycloak",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{access_token}}",
				"type": "string"
			}
		]
	},
	"item": [
		{
			"name": "üîê Authentication",
			"item": [
				{
					"name": "Login - Admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    var jsonData = pm.response.json();",
									"    pm.environment.set(\"access_token\", jsonData.access_token);",
									"    pm.environment.set(\"refresh_token\", jsonData.refresh_token);",
									"    console.log(\"‚úì Token de admin salvo com sucesso!\");",
									"}"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "client_id",
									"value": "{{keycloak_client_id}}"
								},
								{
									"key": "client_secret",
									"value": "{{keycloak_client_secret}}"
								},
								{
									"key": "grant_type",
									"value": "password"
								},
								{
									"key": "username",
									"value": "admin"
								},
								{
									"key": "password",
									"value": "admin123"
								}
							]
						},
						"url": {
							"raw": "{{keycloak_url}}/realms/{{keycloak_realm}}/protocol/openid-connect/token",
							"host": ["{{keycloak_url}}"],
							"path": ["realms", "{{keycloak_realm}}", "protocol", "openid-connect", "token"]
						}
					}
				},
				{
					"name": "Login - Manager",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    var jsonData = pm.response.json();",
									"    pm.environment.set(\"access_token\", jsonData.access_token);",
									"    pm.environment.set(\"refresh_token\", jsonData.refresh_token);",
									"    console.log(\"‚úì Token de manager salvo com sucesso!\");",
									"}"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "client_id",
									"value": "{{keycloak_client_id}}"
								},
								{
									"key": "client_secret",
									"value": "{{keycloak_client_secret}}"
								},
								{
									"key": "grant_type",
									"value": "password"
								},
								{
									"key": "username",
									"value": "manager"
								},
								{
									"key": "password",
									"value": "manager123"
								}
							]
						},
						"url": {
							"raw": "{{keycloak_url}}/realms/{{keycloak_realm}}/protocol/openid-connect/token",
							"host": ["{{keycloak_url}}"],
							"path": ["realms", "{{keycloak_realm}}", "protocol", "openid-connect", "token"]
						}
					}
				},
				{
					"name": "Login - User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    var jsonData = pm.response.json();",
									"    pm.environment.set(\"access_token\", jsonData.access_token);",
									"    pm.environment.set(\"refresh_token\", jsonData.refresh_token);",
									"    console.log(\"‚úì Token de user salvo com sucesso!\");",
									"}"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "client_id",
									"value": "{{keycloak_client_id}}"
								},
								{
									"key": "client_secret",
									"value": "{{keycloak_client_secret}}"
								},
								{
									"key": "grant_type",
									"value": "password"
								},
								{
									"key": "username",
									"value": "user"
								},
								{
									"key": "password",
									"value": "user123"
								}
							]
						},
						"url": {
							"raw": "{{keycloak_url}}/realms/{{keycloak_realm}}/protocol/openid-connect/token",
							"host": ["{{keycloak_url}}"],
							"path": ["realms", "{{keycloak_realm}}", "protocol", "openid-connect", "token"]
						}
					}
				},
				{
					"name": "Refresh Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    var jsonData = pm.response.json();",
									"    pm.environment.set(\"access_token\", jsonData.access_token);",
									"    pm.environment.set(\"refresh_token\", jsonData.refresh_token);",
									"    console.log(\"‚úì Token renovado com sucesso!\");",
									"}"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "client_id",
									"value": "{{keycloak_client_id}}"
								},
								{
									"key": "client_secret",
									"value": "{{keycloak_client_secret}}"
								},
								{
									"key": "grant_type",
									"value": "refresh_token"
								},
								{
									"key": "refresh_token",
									"value": "{{refresh_token}}"
								}
							]
						},
						"url": {
							"raw": "{{keycloak_url}}/realms/{{keycloak_realm}}/protocol/openid-connect/token",
							"host": ["{{keycloak_url}}"],
							"path": ["realms", "{{keycloak_realm}}", "protocol", "openid-connect", "token"]
						}
					}
				}
			]
		},
		{
			"name": "üìö Assuntos",
			"item": [
				{
					"name": "Listar Todos os Assuntos",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code √© 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Resposta √© um array\", function () {",
									"    pm.expect(pm.response.json()).to.be.an('array');",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{api_url}}/api/assuntos",
							"host": ["{{api_url}}"],
							"path": ["api", "assuntos"]
						}
					}
				},
				{
					"name": "Buscar Assunto por ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code √© 200 ou 404\", function () {",
									"    pm.expect([200, 404]).to.include(pm.response.code);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.test(\"Resposta cont√©m ID\", function () {",
									"        var jsonData = pm.response.json();",
									"        pm.expect(jsonData).to.have.property('id');",
									"    });",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{api_url}}/api/assuntos/{{assunto_id}}",
							"host": ["{{api_url}}"],
							"path": ["api", "assuntos", "{{assunto_id}}"]
						}
					}
				},
				{
					"name": "Criar Novo Assunto",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code √© 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Resposta cont√©m ID\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('id');",
									"    pm.environment.set(\"assunto_id\", jsonData.id);",
									"    console.log(\"‚úì ID do assunto salvo: \" + jsonData.id);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"nome\": \"Assunto Teste\",\n  \"descricao\": \"Descri√ß√£o do assunto de teste criado via Postman\"\n}"
						},
						"url": {
							"raw": "{{api_url}}/api/assuntos",
							"host": ["{{api_url}}"],
							"path": ["api", "assuntos"]
						}
					}
				},
				{
					"name": "Atualizar Assunto",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code √© 200 ou 404\", function () {",
									"    pm.expect([200, 404]).to.include(pm.response.code);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.test(\"Assunto foi atualizado\", function () {",
									"        var jsonData = pm.response.json();",
									"        pm.expect(jsonData.nome).to.include(\"Atualizado\");",
									"    });",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"nome\": \"Assunto Atualizado\",\n  \"descricao\": \"Descri√ß√£o atualizada via Postman\"\n}"
						},
						"url": {
							"raw": "{{api_url}}/api/assuntos/{{assunto_id}}",
							"host": ["{{api_url}}"],
							"path": ["api", "assuntos", "{{assunto_id}}"]
						}
					}
				},
				{
					"name": "Deletar Assunto",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code √© 204 ou 404\", function () {",
									"    pm.expect([204, 404]).to.include(pm.response.code);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{api_url}}/api/assuntos/{{assunto_id}}",
							"host": ["{{api_url}}"],
							"path": ["api", "assuntos", "{{assunto_id}}"]
						}
					}
				}
			]
		},
		{
			"name": "üìÑ Movimenta√ß√µes",
			"item": [
				{
					"name": "Listar Todas as Movimenta√ß√µes",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code √© 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Resposta √© um array\", function () {",
									"    pm.expect(pm.response.json()).to.be.an('array');",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{api_url}}/api/movimentacoes",
							"host": ["{{api_url}}"],
							"path": ["api", "movimentacoes"]
						}
					}
				},
				{
					"name": "Buscar Movimenta√ß√£o por ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code √© 200 ou 404\", function () {",
									"    pm.expect([200, 404]).to.include(pm.response.code);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.test(\"Resposta cont√©m ID\", function () {",
									"        var jsonData = pm.response.json();",
									"        pm.expect(jsonData).to.have.property('id');",
									"    });",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{api_url}}/api/movimentacoes/{{movimentacao_id}}",
							"host": ["{{api_url}}"],
							"path": ["api", "movimentacoes", "{{movimentacao_id}}"]
						}
					}
				},
				{
					"name": "Criar Nova Movimenta√ß√£o",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code √© 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Resposta cont√©m ID\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('id');",
									"    pm.environment.set(\"movimentacao_id\", jsonData.id);",
									"    console.log(\"‚úì ID da movimenta√ß√£o salvo: \" + jsonData.id);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"nome\": \"Movimenta√ß√£o Teste\",\n  \"descricao\": \"Descri√ß√£o da movimenta√ß√£o de teste criada via Postman\"\n}"
						},
						"url": {
							"raw": "{{api_url}}/api/movimentacoes",
							"host": ["{{api_url}}"],
							"path": ["api", "movimentacoes"]
						}
					}
				},
				{
					"name": "Atualizar Movimenta√ß√£o",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code √© 200 ou 404\", function () {",
									"    pm.expect([200, 404]).to.include(pm.response.code);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.test(\"Movimenta√ß√£o foi atualizada\", function () {",
									"        var jsonData = pm.response.json();",
									"        pm.expect(jsonData.nome).to.include(\"Atualizada\");",
									"    });",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"nome\": \"Movimenta√ß√£o Atualizada\",\n  \"descricao\": \"Descri√ß√£o atualizada via Postman\"\n}"
						},
						"url": {
							"raw": "{{api_url}}/api/movimentacoes/{{movimentacao_id}}",
							"host": ["{{api_url}}"],
							"path": ["api", "movimentacoes", "{{movimentacao_id}}"]
						}
					}
				},
				{
					"name": "Deletar Movimenta√ß√£o",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code √© 204 ou 404\", function () {",
									"    pm.expect([204, 404]).to.include(pm.response.code);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{api_url}}/api/movimentacoes/{{movimentacao_id}}",
							"host": ["{{api_url}}"],
							"path": ["api", "movimentacoes", "{{movimentacao_id}}"]
						}
					}
				}
			]
		},
		{
			"name": "üìã Tipos de Documento",
			"item": [
				{
					"name": "Listar Todos os Tipos de Documento",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code √© 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Resposta √© um array\", function () {",
									"    pm.expect(pm.response.json()).to.be.an('array');",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{api_url}}/api/tipos-documento",
							"host": ["{{api_url}}"],
							"path": ["api", "tipos-documento"]
						}
					}
				},
				{
					"name": "Buscar Tipo de Documento por ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code √© 200 ou 404\", function () {",
									"    pm.expect([200, 404]).to.include(pm.response.code);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.test(\"Resposta cont√©m ID\", function () {",
									"        var jsonData = pm.response.json();",
									"        pm.expect(jsonData).to.have.property('id');",
									"    });",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{api_url}}/api/tipos-documento/{{tipo_documento_id}}",
							"host": ["{{api_url}}"],
							"path": ["api", "tipos-documento", "{{tipo_documento_id}}"]
						}
					}
				},
				{
					"name": "Criar Novo Tipo de Documento",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code √© 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Resposta cont√©m ID\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('id');",
									"    pm.environment.set(\"tipo_documento_id\", jsonData.id);",
									"    console.log(\"‚úì ID do tipo de documento salvo: \" + jsonData.id);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"nome\": \"Tipo Documento Teste\",\n  \"descricao\": \"Descri√ß√£o do tipo de documento de teste criado via Postman\"\n}"
						},
						"url": {
							"raw": "{{api_url}}/api/tipos-documento",
							"host": ["{{api_url}}"],
							"path": ["api", "tipos-documento"]
						}
					}
				},
				{
					"name": "Atualizar Tipo de Documento",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code √© 200 ou 404\", function () {",
									"    pm.expect([200, 404]).to.include(pm.response.code);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.test(\"Tipo de documento foi atualizado\", function () {",
									"        var jsonData = pm.response.json();",
									"        pm.expect(jsonData.nome).to.include(\"Atualizado\");",
									"    });",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"nome\": \"Tipo Documento Atualizado\",\n  \"descricao\": \"Descri√ß√£o atualizada via Postman\"\n}"
						},
						"url": {
							"raw": "{{api_url}}/api/tipos-documento/{{tipo_documento_id}}",
							"host": ["{{api_url}}"],
							"path": ["api", "tipos-documento", "{{tipo_documento_id}}"]
						}
					}
				},
				{
					"name": "Deletar Tipo de Documento",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code √© 204 ou 404\", function () {",
									"    pm.expect([204, 404]).to.include(pm.response.code);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{api_url}}/api/tipos-documento/{{tipo_documento_id}}",
							"host": ["{{api_url}}"],
							"path": ["api", "tipos-documento", "{{tipo_documento_id}}"]
						}
					}
				}
			]
		}
	],
	"variable": [
		{
			"key": "api_url",
			"value": "http://localhost:5000",
			"type": "string"
		},
		{
			"key": "keycloak_url",
			"value": "http://localhost:8080",
			"type": "string"
		},
		{
			"key": "keycloak_realm",
			"value": "netredisaside2",
			"type": "string"
		},
		{
			"key": "keycloak_client_id",
			"value": "netredisaside2-api",
			"type": "string"
		},
		{
			"key": "keycloak_client_secret",
			"value": "your-client-secret-here",
			"type": "string"
		}
	]
}