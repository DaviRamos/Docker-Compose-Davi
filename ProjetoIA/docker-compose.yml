name: ProjetoDaviIAN
services:

  ollama-service:
    image: ollama/ollama:${OLLAMA_DOCKER_TAG-latest}
    container_name: ollama-container
    volumes:
      - ollama-data:/root/.ollama
    ports:
      - "11434:11434"
    pull_policy: always
    tty: true
    restart: always
    deploy:
      resources:
        reservations:
          devices:
            - driver: ${OLLAMA_GPU_DRIVER-nvidia}
              count: ${OLLAMA_GPU_COUNT-1}
              capabilities:
                - gpu
    healthcheck:
      test: ollama --version || exit 1

  open-webui-service:
    image: ghcr.io/open-webui/open-webui:${WEBUI_DOCKER_TAG-main}
    container_name: open-webui-container
    volumes:
      - open-webui-data:/app/backend/data
    depends_on:
      ollama-service:
        condition: service_healthy
    ports:
      - 3000:8080
    environment:
      - 'OLLAMA_BASE_URL=http://ollama:11434'
      - 'WEBUI_SECRET_KEY='
    extra_hosts:
      - host.docker.internal:host-gateway
    restart: unless-stopped
    healthcheck:
      #test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  litellm-service:
    image: ghcr.io/berriai/litellm:main-stable
    container_name: litellm-container
    networks:
      - local_network
    env_file:
      - .env
    ports:
      - 4000:4000
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres-container:5432/${POSTGRES_LITELLM_DB}
      LITELLM_MASTER_KEY: ${LITELLM_MASTER_KEY}
      UI_USERNAME: ${UI_USERNAME}
      UI_PASSWORD: ${UI_PASSWORD}
      STORE_MODEL_IN_DB: "True" # allows adding models to proxy via UI
    depends_on: # Ensure that litellm starts after open-webui and litellm-db      
      open-webui-service:
        condition: service_healthy
      postgres-service:
        condition: service_healthy      
    healthcheck: # Defines the health check configuration for the container
      test: [
          "CMD",
          "curl",
          "-f",
          "http://localhost:4000/health/liveliness || exit 1",
        ] # Command to execute for health check
      interval: 30s # Perform health check every 30 seconds
      timeout: 10s # Health check command times out after 10 seconds
      retries: 3 # Retry up to 3 times if health check fails
      start_period: 40s # Wait 40 seconds after container start before beginning health checks
    restart: on-failure:5
  
  
  keycloak-service:
    container_name: keycloak-container
    image: quay.io/keycloak/keycloak:26.0.8
    environment:
      KC_LOG_CONSOLE_COLOR: 'true'
      KC_BOOTSTRAP_ADMIN_USERNAME: ${KEYCLOAK_ADMIN_USERNAME}
      KC_BOOTSTRAP_ADMIN_PASSWORD: ${KEYCLOAK_ADMIN_PASSWORD}
      KC_HOSTNAME: localhost
      KC_HOSTNAME_STRICT_FRONTCHANNEL: 'true'
      KC_HTTP_ENABLED: 'true' #PRD false
      KC_HEALTH_ENABLED: 'true'
      KC_METRICS_ENABLED: 'true'
      KC_HTTP_METRICS_HISTOGRAMS_ENABLED: 'true'
      KC_CACHE_METRICS_HISTOGRAMS_ENABLED: 'true'
      KC_LOG_LEVEL: INFO # DEBUG
      # DB Configuration
      KC_DB: postgres
      #KC_DB_SCHEMA: canaldeploy
      KC_DB_URL_HOST: postgresHost
      KC_DB_URL_PORT: 5432
      KC_DB_NAME: keycloakdb
      KC_DB_URL: jdbc:postgresql://postgres-container:5432/keycloakdb
      KC_DB_USERNAME: ${POSTGRES_USER}
      KC_DB_PASSWORD: ${POSTGRES_PASSWORD}
    depends_on:
      postgres-service:
        condition: service_healthy
    healthcheck:
      test: ['CMD-SHELL', '[ -f /tmp/HealthCheck.java ] || echo "public class HealthCheck { public static void main(String[] args) throws java.lang.Throwable { System.exit(java.net.HttpURLConnection.HTTP_OK == ((java.net.HttpURLConnection)new java.net.URL(args[0]).openConnection()).getResponseCode() ? 0 : 1); } }" > /tmp/HealthCheck.java && java /tmp/HealthCheck.java http://localhost:9000/health/live']
      interval: 5s
      timeout: 5s
      retries: 10
    command: ['start-dev', '--http-port', '8080']
    ports:
      - 8087:8080
      - 7447:7443
      - 9007:9000
    networks:
      - local_network
    deploy:
      resources:
        limits:
          cpus: '0.80'
          memory: 512M
        reservations:
          cpus: '0.30'
          memory: 128M
    cpuset: '1'


  pgadmin-service:
    container_name: pgadmin-container
    image: dpage/pgadmin4:8.14.0
    depends_on:
      postgres-service:
        condition: service_healthy
      keycloak-service:
        condition: service_healthy
    environment:
      PGADMIN_DEFAULT_EMAIL: davi.info@gmail.com
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
      PGADMIN_LISTEN_PORT: 80
      # 0 - CRITICAL
      # 1 - ERROR
      # 2 - WARNING
      # 3 - INFO
      # 4 - DEBUG
      # 5 - TRACE
      # 10 - NOTSET
      PGADMIN_CONFIG_CONSOLE_LOG_LEVEL: 2
    volumes:
      - pgadmin-keycloak:/var/lib/pgadmin4/storage
    ports:
      - 15437:15432
      - 877:80
    healthcheck:
      test: [ 'CMD', 'wget', '-O', '-', 'http://localhost:80/misc/ping' ]
      interval: 50s
      timeout: 3s
      retries: 10
      start_period: 1m
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 512M
        reservations:
          cpus: '0.5'
          memory: 256M
    cpuset: '1'


  redis-service:
    image: "redis:latest"
    container_name: "redis_container"
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "redis-cli ping | grep PONG"]
      interval: 1s
      timeout: 3s
      retries: 5
    command: ["redis-server", "--requirepass", "${REDIS_PASSWORD}"]
    # Uncomment the next line to use a custom configuration file
    # command: ["redis-server", "/usr/local/etc/redis/redis.conf"]  
    networks:
      - local_network
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      #  - /path/to/local/redis.conf:/usr/local/etc/redis/redis.conf
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - REDIS_HOST=${REDIS_HOST}
      - REDIS_PORT=${REDIS_PORT}
      - REDIS_DATABASES=${REDIS_DATABASES} 


  qdrant-service:
    image: qdrant/qdrant:latest
    restart: always
    container_name: qdrant-container
    healthcheck:
          test: ["CMD", "curl", "-f", "http://localhost:6333/readyz"]
          interval: 10s
          timeout: 2s
          retries: 5
    networks:
      - local_network
    ports:
      - 6333:6333
      - 6334:6334
    expose:
      - 6333
      - 6334
      - 6335
    configs:
      - source: qdrant-service_config
        target: /qdrant/config/production.yaml
    volumes:
      - qdrant_data:/qdrant/storage
    deploy:
      resources:
        limits:
          cpus: '0.50'
          memory: 256M
        reservations:
          cpus: '0.25'
          memory: 128M
    cpuset: '1'

  postgres-service:
    image: postgres:17.2
    restart: always
    container_name: postgres-container
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_HOST: postgresHost
      POSTGRES_PORT: 5432
      # 0 - EMERGENCY
      # 1 - ALERT
      # 2 - CRITICAL
      # 3 - ERROR
      # 4 - WARNING
      # 5 - NOTICE
      # 6 - INFO
      # 7 - DEBUG
      POSTGRES_LOG_LEVEL: 4
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./01-CriaDatabase_LitellmDB.sql:/docker-entrypoint-initdb.d/01-CriaDatabase_LitellmDB.sql
      - ./02-CriaDatabase_openwebui.sql:/docker-entrypoint-initdb.d/02-CriaDatabase_openwebui.sql
    healthcheck:
      test:
        - CMD-SHELL
        - pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}
      interval: 50s
      timeout: 5s
      retries: 15
      start_period: 2m
    ports:
        - 5437:5432
    networks:
      - local_network
    deploy:
      resources:
        limits:
          cpus: '0.50'
          memory: 256M
        reservations:
          cpus: '0.25'
          memory: 128M
    cpuset: '1'

networks:
  local_network:
    driver: bridge

volumes:
  qdrant_data:
    name: qdrant-service_data
  ollama-data:
    name: ollama-service_data
  open-webui-data:
    name: open-webui-service_data
  litellm-data: 
     name: litellm-service_data
  postgres-data:
    name: postgres-service_data
  pgadmin-keycloak:
    name: pgadmin-service-keycloak_data
  redis_data:
    name: redis-service_data

configs:
  qdrant-service_config:
    content: |
      log_level: INFO
